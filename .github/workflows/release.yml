name: release
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions: write-all

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-22.04
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      slice_version: ${{ env.SLICE_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.SLICE_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "SLICE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.SLICE_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SLICE_VERSION }}
          release_name: ${{ env.SLICE_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Build static releases with PCRE2.
      PCRE2_SYS_STATIC: 1
    strategy:
      matrix:
        build: 
          - linux
          - linux-arm
          - macos
          - macos-arm
          - win-msvc
          # - win-gnu
          - win32-msvc
        include:
        - build: linux
          os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-22.04
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-12
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-arm
          os: macos-12
          rust: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-2022
          rust: stable
          target: x86_64-pc-windows-msvc
        # - build: win-gnu
        #   os: windows-2022
        #   rust: stable-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-2022
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust toolchain
      run: |
        rustup update --no-self-update ${{ matrix.rust }}
        rustup target add ${{ matrix.target }}
        rustup default ${{ matrix.rust }}

    - name: Setup cross
      shell: bash
      if: ${{ !startsWith(matrix.os, 'macos') }}
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
    - name: Setup target flags
      shell: bash
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Build archive
      shell: bash
      run: |
        staging="slice-${{ needs.create-release.outputs.slice_version }}-${{ matrix.target }}"
        mkdir -p "$staging"/{complete,doc}

        cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$staging/"

        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          cp "target/${{ matrix.target }}/release/slice.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/slice" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
